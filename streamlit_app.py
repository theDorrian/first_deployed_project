import streamlit as st
import pandas as pd
import pickle
from sklearn.metrics import (
    accuracy_score,
    roc_auc_score,
    confusion_matrix,
    classification_report,
)

DATA_URL = (
    "https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv"
)
MODEL_PATH = "best_model.pkl"
MODEL_FEATURES = [
    "Pclass",
    "Sex",
    "Age",
    "SibSp",
    "Parch",
    "Fare",
    "Embarked_Q",
    "Embarked_S",
]

st.set_page_config(page_title="üö¢ Titanic Survival Predictor", layout="wide")

@st.cache_data
def load_data():
    df = pd.read_csv(DATA_URL)
    return df

@st.cache_resource
def load_model():
    with open(MODEL_PATH, "rb") as f:
        model = pickle.load(f)
    return model

def preprocess(df: pd.DataFrame) -> pd.DataFrame:
    df = df.copy()
    # 1) –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏
    df["Age"].fillna(df["Age"].median(), inplace=True)
    df["Fare"].fillna(df["Fare"].median(), inplace=True)
    df["Embarked"].fillna(df["Embarked"].mode()[0], inplace=True)
    # 2) –ö–æ–¥–∏—Ä—É–µ–º –ø–æ–ª
    df["Sex"] = df["Sex"].map({"male": 0, "female": 1})
    # 3) One-hot –¥–ª—è –ø–æ—Ä—Ç–∞ –ø–æ—Å–∞–¥–∫–∏
    df = pd.get_dummies(df, columns=["Embarked"], drop_first=True)
    # 4) –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –æ–±–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å—Ç—å
    for col in ["Embarked_Q", "Embarked_S"]:
        if col not in df.columns:
            df[col] = 0
    # 5) –û—Ç–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–µ —Ñ–∏—á–∏ –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    return df[MODEL_FEATURES]

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ ---
df = load_data()
model = load_model()

st.title("üö¢ Titanic Survival Predictor")
st.write(
    """
    –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞—Ä–∞–Ω–µ–µ –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å (`best_model.pkl`) –∏ –¥–µ–ª–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤—ã–∂–∏–≤–∞–Ω–∏—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ Titanic.
    """
)

# === –ë–ª–æ–∫ 1: –ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –≤—Å–µ–º –¥–∞—Ç–∞—Å–µ—Ç–µ ===
st.subheader("üìä –ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏ –Ω–∞ –≤—Å–µ–º –¥–∞—Ç–∞—Å–µ—Ç–µ")
X_all = preprocess(df)
y_all = df["Survived"]
y_pred_all = model.predict(X_all)
y_proba_all = model.predict_proba(X_all)[:, 1]

acc = accuracy_score(y_all, y_pred_all)
rocauc = roc_auc_score(y_all, y_proba_all)

col1, col2 = st.columns(2)
col1.metric("Accuracy", f"{acc:.3f}")
col2.metric("ROC AUC", f"{rocauc:.3f}")

st.write("**Confusion Matrix**")
st.write(confusion_matrix(y_all, y_pred_all))

st.write("**Classification Report**")
st.text(classification_report(y_all, y_pred_all))

st.write("---")

# === –ë–ª–æ–∫ 2: –ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö ===
st.subheader("üóÇ –ü—Ä–µ–≤—å—é –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞")
st.dataframe(df.sample(10), use_container_width=True)

st.write("---")

# === –ë–ª–æ–∫ 3: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ ===
st.sidebar.header("üßë‚Äç‚úàÔ∏è –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–∞—Å—Å–∞–∂–∏—Ä–∞")

pclass = st.sidebar.selectbox("Pclass", sorted(df["Pclass"].unique()))
sex = st.sidebar.selectbox("Sex", ["male", "female"])
sex = 0 if sex == "male" else 1
age = st.sidebar.slider("Age", float(df["Age"].min()), float(df["Age"].max()), float(df["Age"].median()))
sibsp = st.sidebar.number_input("SibSp", min_value=int(df["SibSp"].min()), max_value=int(df["SibSp"].max()), value=0)
parch = st.sidebar.number_input("Parch", min_value=int(df["Parch"].min()), max_value=int(df["Parch"].max()), value=0)
fare = st.sidebar.number_input("Fare", float(df["Fare"].min()), float(df["Fare"].max()), float(df["Fare"].median()))
embarked = st.sidebar.selectbox("Embarked", ["C", "Q", "S"])

# –°–æ–±–∏—Ä–∞–µ–º DataFrame –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞
new_passenger = pd.DataFrame([{
    "Pclass": pclass,
    "Sex": sex,
    "Age": age,
    "SibSp": sibsp,
    "Parch": parch,
    "Fare": fare,
    "Embarked": embarked,
}])

# –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
X_new = preprocess(new_passenger)
pred = model.predict(X_new)[0]
proba = model.predict_proba(X_new)[0, 1]

st.sidebar.subheader("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
st.sidebar.markdown(f"**–í—ã–∂–∏–≤–µ—Ç:** {'–î–∞' if pred == 1 else '–ù–µ—Ç'}")
st.sidebar.markdown(f"**–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–∂–∏–≤–∞–Ω–∏—è:** {proba:.2f}")
